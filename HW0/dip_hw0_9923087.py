# -*- coding: utf-8 -*-
"""DIP_HW0_9923087.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/107B5AjTAMgvZOtQPXT3ZFaYpWGEL8zuq

سهند نوعی 9923087 - تمرین صفر

لینک کولب من:
https://colab.research.google.com/drive/107B5AjTAMgvZOtQPXT3ZFaYpWGEL8zuq#scrollTo=nnY3mPQTf-bu

<div dir=rtl>
<font size = "6">قبل از هر کاری، با استفاده از مسیری که در خط پایین ذکر شده، یک کپی از این نوتبوک در گوگل درایو خودتان بسازید و تمرین را در آن نسخه حل کنید.</font>
</div>

<div>
<font size = "4">
File --> Save a copy in Drive
</font>
</div>

# Question 0: Run the cell below without modifying it.

<div dir=rtl>
<font size = "6">بدون اعمال هیچ تغییری در بلوک زیر، آن را اجرا کنید.</font>
</div>
"""

#@title Downloading the necessary data for this homework
!wget --no-check-certificate 'https://drive.google.com/uc?export=download&id=1kAzfR-tVf3Oq91MJFkkLa2wqXSoQvPHH' -O 'HW0_data.zip'
!unzip HW0_data.zip

"""# The Imports"""

###
import numpy as np
import sys
import matplotlib.pyplot as plt
import cv2
###

"""# Question 1: (20%)"""

#@title Q1 - Part 1 (10%)
###
random_array = np.random.uniform(10, 54000, size=80)
random_array
###

#@title Q1 - Part 2 (5%)
###
type(random_array), type(random_array[0])
###

#@title Q1 - Part 3 (5%)
###
rounded = np.round(random_array, decimals=0)
rounded
###

#@title Q1 - Part 4 (30%)
###
print("Integer types:")
print(f"int8: Min:{np.iinfo(np.int8).min}, Max:{np.iinfo(np.int8).max}, range:{np.iinfo(np.int8).max - np.iinfo(np.int8).min}, Size:{sys.getsizeof(np.int8(1))}")
print(f"uint8: Min:{np.iinfo(np.uint8).min}, Max:{np.iinfo(np.uint8).max}, range:{np.iinfo(np.uint8).max - np.iinfo(np.uint8).min}, Size:{sys.getsizeof(np.uint8(1))}")
print(f"int16: Min:{np.iinfo(np.int16).min}, Max:{np.iinfo(np.int16).max}, range:{np.iinfo(np.int16).max - np.iinfo(np.int16).min}, Size:{sys.getsizeof(np.int16(1))}")
print(f"uint16: Min:{np.iinfo(np.uint16).min}, Max:{np.iinfo(np.uint16).max}, range:{np.iinfo(np.uint16).max - np.iinfo(np.uint16).min}, Size:{sys.getsizeof(np.uint16(1))}")
print(f"int32: Min:{np.iinfo(np.int32).min}, Max:{np.iinfo(np.int32).max}, range:{np.iinfo(np.int32).max - np.iinfo(np.int32).min}, Size:{sys.getsizeof(np.int32(1))}")
print(f"int64: Min:{np.iinfo(np.int64).min}, Max:{np.iinfo(np.int64).max}, range:{np.iinfo(np.int64).max - np.iinfo(np.int64).min}, Size:{sys.getsizeof(np.int64(1))}")
print(f"int: Size of int(1) is {sys.getsizeof(int(1))} and int(10000000000) is {sys.getsizeof(int(10000000000))} 👉 So the default size of int is the same as int32 but it can expand as needed to" +
      " accommodate larger integer values based on the input.\n\n")
# print(f"float: Min:{np.finfo(np.float).min}, Max:{np.finfo(np.float).max}, range:{np.finfo(np.float).max - np.finfo(np.float).min}")
print("Float types:")
print(f"float32: Min:{np.finfo(np.float32).min}, Max:{np.finfo(np.float32).max}, range:{np.finfo(np.float32).max - np.finfo(np.float32).min}, Size:{sys.getsizeof(np.float32(1))}")
print(f"float64: Min:{np.finfo(np.float64).min}, Max:{np.finfo(np.float64).max}, range:{np.finfo(np.float64).max - np.finfo(np.float64).min}, Size:{sys.getsizeof(np.float64(1))}")
print(f"float: Size:{sys.getsizeof(float(1))}\n\n")

print(f"Since our array has integer numbers in range of 40 to 54000, np.int16 is enough for that:")
print(f"rounded array elements type before changing:{type(rounded[0])}")
rounded = np.int16(rounded)
print(f"rounded array elements type after changing:{type(rounded[0])}")
###

#@title Q1 - Part 5 (5%)
###
r1 = rounded
# First way
r1 = rounded.reshape(8, 10)
print(f"r1.shape = {r1.shape}")
print(f"r1 = {r1}")
# Second way
rounded = np.reshape(rounded, (8, 10))
print(f"np.shape(rounded) = {np.shape(rounded)}")
print(f"rounded = {rounded}")
###

#@title Q1 - Part 6 (5%)
###
print(f"min = {np.min(rounded)}")
print(f"max = {np.max(rounded)}")
###

#@title Q1 - Part 7 (15%)
###
rounded_int8 = np.int8(rounded)
print(rounded_int8)
###

"""Q1 - Part 7 Explanation:
<div dir=rtl>
<font size = "5">{بله تغییر در اکثر اعداد دیده شد. زیرا بازه int8 بین -128 تا 127 هست اما اعداد ما بین 10 تا 54000 هست بنابراین 8بیت سمت چپ در هنگام تبدیل آرایه int16 به int8 میس می‌شوند و قسمتی از داده از بین می‌رود.}</font><br />
</div>
"""

#@title Q1 - Part 8 (15%)
###
C_two = tuple(rounded[:, 1])
print(type(C_two))
print(C_two)

R_three = rounded[2, 1:]
print(type(R_three))
print(R_three)
###

#@title Q1 - Part 9 (10%)
###
my_dict = dict(zip(C_two, R_three))
print(my_dict)
###

"""# Question 2: (25%)"""

#@title Q2 - Part 1 (100%)
###
# 1
# 1
def func(dims: tuple, seed: int):
  # 2
  if len(dims) !=2:
    return f"'dims' must be (2, ) but you've passed {len(dims), }"
  elif type(dims) != tuple:
    return f"'dims' type must be 'tuple' but you've passed {type(dims)}"
  elif type(seed) != int:
    return f"'seed' type must be 'int' but you've passed {type(seed)}"
  # 3
  result = np.zeros(dims, dtype=int)
  for i in range(dims[0]):
    for j in range(dims[1]):
      if (i, j) == (0, 0):
        result[0, 0] = seed
      else:
        if i - 1 < 0 and j - 1 >= 0:
          result[i, j] = result[i, j - 1]
        elif i - 1 >= 0 and j - 1 < 0:
          result[i, j] = - result[i - 1, j]
        else:
          result[i, j] = result[i, j - 1] - result[i - 1, j] - result[i - 1, j - 1]
  return result

func((3, 4), 1)
###

"""# Question 3: (30%)"""

#@title Q3 - Part 1 (0%)
###
std_num = 9923087
###

#@title Q3 - Part 2 (40%)
###
def circle_matrix(radius: np.uint8):
  if type(radius) not in [int, np.uint8]:
    return f"'radius' must be integer not {type(radius)}"
  if radius < 3:
    return f"'radius' must equal to or bigger than 3"
  radius = np.uint8(radius)


  center_i = center_j = radius
  side = 2 * radius + 1
  matrix = np.zeros((side, side), dtype=np.uint8)
  for i in range(side):
    for j in range(side):
      distance = np.sqrt((i - center_i) ** 2 + (j - center_j) ** 2)
      if distance <= radius:
        matrix[i, j] = 255
      else:
        matrix[i, j] = 0
  return matrix

circle_matrix(4)
###

#@title Q3 - Part 3 (35%)
###
def add_noise(matrix, noise_range: np.uint8):
  if matrix.ndim != 2:
    return "input matrix must be 2 dimensional"
  if noise_range <= 0:
    return "noise range must be positive"
  tmp = noise_range
  noise_range = np.uint8(noise_range)
  if tmp != noise_range:
    return "noise range must be between 0 to 255"

  noise_matrix = np.random.uniform(0, noise_range, size=matrix.shape)
  noise_matrix = np.uint8(np.floor(noise_matrix))
  final_noisy_matrix = matrix +  np.where(matrix == 0, noise_matrix, -noise_matrix)
  return final_noisy_matrix

noise_range = 20 + sum(list(map(int, str(std_num)))) % 15
add_noise(circle_matrix(3), noise_range)

###

#@title Q3 - Part 4 (15%)
###
radius = 10
circle = circle_matrix(radius)
noisy_circle = add_noise(circle, noise_range)
# print(circle)
# print(noisy_circle)
circle_dim = circle.shape[0]
fig, axes = plt.subplots(1, 2, figsize=(circle_dim, circle_dim))
# print(type(axes))
# print(type(axes[0]))
# print(axes)
axes[0].imshow(circle, cmap="gray", vmin=0, vmax=255)
axes[0].set_title(f"Pure Circle(Radius={radius})", fontsize=circle_dim)
axes[1].imshow(noisy_circle, cmap="gray", vmin=0, vmax=255)
axes[1].set_title(f"Noisy Circle(Radius={radius})\nnoise range domain:{noise_range}", fontsize=circle_dim)
plt.suptitle(f"HW0-Image-{std_num}", fontsize=circle_dim)
plt.subplots_adjust(top=1.4)
for ax in axes:
  ax.tick_params(axis="x", labelsize=circle_dim / 1.75)
  ax.tick_params(axis="y", labelsize=circle_dim / 1.75)
# plt.tight_layout()
plt.show()

###

#@title Q3 - Part 5 (10%)
###
fig_3d = plt.figure()
circle_3d = fig_3d.add_subplot(121, projection="3d")
noisy_circle_3d = fig_3d.add_subplot(122, projection="3d")

x, y = np.meshgrid(np.arange(circle.shape[0]), np.arange(circle.shape[1]))
x_noisy, y_noisy = np.meshgrid(np.arange(noisy_circle.shape[0]), np.arange(noisy_circle.shape[1]))

z = circle.flatten()
z_noisy = noisy_circle.flatten()
# print(x)
# print(y)
# print(z.tolist())
# print(x.shape, y.shape, z.shape, circle.shape)

circle_3d.scatter(x, y, z, c='r', marker='.')
noisy_circle_3d.scatter(x_noisy, y_noisy, z_noisy, c='r', marker=".")
circle_3d.set_title("PURE CIRCLE")
noisy_circle_3d.set_title("NOISY CIRCLE")
plt.suptitle(f"HW0-Surface-{std_num}")
plt.show()
###

"""# Question 4: (25%)"""

#@title Q4 - Part 1 (15%)
###
r_image = plt.imread("chest-xray.png")
fig4, axes4 = plt.subplots(1, 2)
axes4[0].imshow(r_image)
axes4[0].set_title(f"dimensions: {r_image.shape}")

my_image = cv2.imread("chest-xray.png")
grayscale_image = cv2.cvtColor(my_image, cv2.COLOR_BGR2GRAY)

axes4[1].imshow(grayscale_image, cmap="gray")
axes4[1].set_title(f"grayscale image({grayscale_image.shape})")

plt.show()
###

#@title Q4 - Part 2 (5%)
###
print(f"original image data type: {r_image.dtype}")
print(f"grayscale image data type: {grayscale_image.dtype}")
###

#@title Q4 - Part 3 (10%)
###
print(f"original image memory usage: {r_image.nbytes / 10**6}MBs")
print(f"grayscale image memory usage: {grayscale_image.nbytes / 10**6}MBs")
###

"""Q4 - Part 3 Explanation:
<div dir=rtl>
<font size = "5">{از آنجایی که نوع داده هر پیکسل در تصویر اصلی از نوع float32 است و در تصویر خاکستری شده از نوع uint8، است حجم اشغال شده توسط تصویر سیاه و سفید یک چهارم تصویر اصلی است.}</font><br />
</div>
"""

#@title Q4 - Part 4 (15%)
###
half = int(grayscale_image.shape[1] / 2)
left_half_gray = grayscale_image[:, :half]
plt.title(f"Left half of chest-xray\ndimenstions:{left_half_gray.shape}")
plt.imshow(left_half_gray, cmap="gray")
plt.show()
###

#@title Q4 - Part 5 (10%)
###
flipped = cv2.flip(left_half_gray, 1)
plt.imshow(flipped, cmap="gray")
plt.title("flipped")
plt.show()
###

#@title Q4 - Part 6 (15%)
###
fig46, ax46 = plt.subplots(2, 3)
ax46[0, 0].imshow(grayscale_image, cmap="gray", vmin=0, vmax=255)
ax46[0, 0].set_title("grayscale")

ax46[0, 1].imshow(left_half_gray, cmap="gray", vmin=0, vmax=255)
ax46[0, 1].set_title("left half chest")

ax46[0, 2].imshow(flipped, cmap="gray")
ax46[0, 2].set_title("symmetry in x axis")
plt.show()
###

#@title Q4 - Part 7 (30%)
###
fig47, ax47 = plt.subplots(2, 3, sharey="row")
ax47[0, 0].imshow(grayscale_image, cmap="gray", vmin=0, vmax=255)
ax47[0, 0].set_title("grayscale")

ax47[0, 1].imshow(left_half_gray, cmap="gray", vmin=0, vmax=255)
ax47[0, 1].set_title("left half chest")

ax47[0, 2].imshow(flipped, cmap="gray")
ax47[0, 2].set_title("symmetry in x axis")

color_range = 256
steps = 4
num_bins = color_range // steps
grayscale_image_hist, bins0 = np.histogram(grayscale_image, bins=num_bins, range=(0, color_range))
left_half_gray_hist, bins1 = np.histogram(left_half_gray, bins=num_bins, range=(0, color_range))
flipped_hist, bins2 = np.histogram(flipped, bins=num_bins, range=(0, color_range))
bar_width = 0.6
ax47[1, 0].bar(bins0[:-1], grayscale_image_hist, width=bar_width)
ax47[1, 1].bar(bins1[:-1], left_half_gray_hist, width=bar_width)
ax47[1, 2].bar(bins2[:-1], flipped_hist, width=bar_width)

print(sum(grayscale_image_hist))
plt.show()
###

"""Q4 - Part 7 Explanation:
<div dir=rtl>
<font size = "5">{از آنجایی که بخش زیادی از تصویر بدون رنگ یا مشکی است، بنابراین در نمودار هیستوگرام بیشترین سهم را intensity صفر دارد که تعداد پیکسل های با این شدت به بیش از 60هزار میرسد. در مقایسه نمودار هیستوگرام سه عکس میتوان گفت که flip کردن تاثیر در intensity ندارد بنابراین عکس دوم و سوم نمودار هیستوگرام مشابه دارند اما چون هر دوی این عکس ها نصف تعداد پیکسل های عکس اول را دارند، نمودار  }
</font><br />
</div>

<div dir=rtl>
<font size = "5">	** توجه داشتید باشید کولب خود را بصورت viewer به اشتراک بگذارید. (بالا سمت راست دکمه Share قرار دارد که موقع فشردن آن یک صفحه باز می‌شود و گزینه‌ای که بصورت پیشفرض نوشته restricted را تغییر دهید)

</font><br />
</div>

<div dir=rtl>
<font size = "5">
**	حتماً توجه کنید که در هنگام تحویل و آخرین ویرایش روی کد خود، خروجی همه‌ی بلاک‌ها، خروجی درست و نهایی همان بلاک باشد. (بطور مثال ممکن است تغییری در کد بدهید و رویت کنید که خروجی درست نیست و فقط تغییرتان را undo کرده ولی دوباره اجرایش نکنید و خروجی سلول همان خروجی دوم که جواب اشتباهی بود بماند).

</font><br />
</div>

<div dir=rtl>
<font size = "5">	**	نکته مهم: لطفاً بعد از تحویل تمرین دیگر کد گوگل کولب خود را باز نکنید و حتی کوچکترین تغییری (حتی در حد ایجاد یک space) در آن ندهید.(چرا که تاریخ آخرین ویرایش آن تغییر کرده و برای مصحح محترم قابل احراز نیست که این کد شما چه زمانی نوشته شده است (از نظر موعد قابل پذیرش برای تحویل) و بخش کدنویسی آن تمرین از شما پذیرفته نخواهد شد)

</font><br />
</div>

<div dir=rtl>
<font size = "5">	نحوه ارسال تمارین: PDF حل تمارین تشریحی به همراه کدهای نوشته شده (اشتراک لینک گوگل کولب شما (داخل Notepad و ابتدای گزارش تشریحی) + تحویل pdf پرینت آن + دانلود .ipynb آن) در قالب یک فایل فشرده zip به اسم HW0_Num باشند که Num شماره دانشجویی شما است مانند HW0_400133001 و فقط از طریق سامانه ی مدیریت یادگیری Courses ارسال بفرمایید. با آرزوی موفقیت برای شما  
</font><br />
</div>
"""